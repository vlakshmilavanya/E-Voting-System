// <auto-generated />
using System;
using BusinessDirectory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessDirectory.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220316151223_removed reviewId in service")]
    partial class removedreviewIdinservice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("BusinessDirectory.DB.Models.ActivityLog", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ActivityTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlOrModule")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("tblActivityLogs");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.ActivityType", b =>
                {
                    b.Property<int>("ActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActivityTypeTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityTypeId");

                    b.ToTable("tblAcitvityTypes");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddressTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Landmark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Pincode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AddressID");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("tblAddress");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.AppConfig", b =>
                {
                    b.Property<int>("configId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("configName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("configValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("createdDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updatedDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("configId");

                    b.HasIndex("UserId");

                    b.ToTable("tblAppconfig");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.BusinessDetailsForm", b =>
                {
                    b.Property<int>("BsnServiceDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BsnDetailTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FaxNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LegalBusinessName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PreListingDetailsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TollFreeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BsnServiceDetailsID");

                    b.HasIndex("AddressId");

                    b.HasIndex("PreListingDetailsID");

                    b.HasIndex("UserId");

                    b.ToTable("tblBusinessDetailsForm");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CategoryTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("tblCategories");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("COuntryTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("tblCountries");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ErrorTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("ErrorTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UrlOrModule")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ErrorId");

                    b.HasIndex("ErrorTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("tblErrorLogs");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.ErrorType", b =>
                {
                    b.Property<int>("ErrorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ErrorTypeTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorTypeTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ErrorTypeId");

                    b.ToTable("tblErrorTypes");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.FAQ", b =>
                {
                    b.Property<int>("FaqID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BsnServiceDetailsID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FaqTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FaqID");

                    b.HasIndex("BsnServiceDetailsID");

                    b.ToTable("tblFAQs");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessDetailsFormBsnServiceDetailsID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ImageTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.HasIndex("BusinessDetailsFormBsnServiceDetailsID");

                    b.ToTable("tblImages");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MerbershipTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("MembershipId");

                    b.HasIndex("MembershipTypeID");

                    b.HasIndex("ServiceID");

                    b.ToTable("tblMemberships");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.MembershipType", b =>
                {
                    b.Property<int>("MemberShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("MembershipCost")
                        .HasColumnType("REAL");

                    b.Property<string>("MembershipName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MemberShipId");

                    b.ToTable("tblMembershipTypes");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Orders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("UserID");

                    b.ToTable("tblOrders");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.PreListingDetail", b =>
                {
                    b.Property<int>("PreListingDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PreListTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PreListingDetailID");

                    b.HasIndex("UserId");

                    b.ToTable("tblPreListingDetails");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Query", b =>
                {
                    b.Property<int>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("QueryDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("QueryTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QueryId");

                    b.HasIndex("UserId");

                    b.ToTable("tblQueries");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReviewTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceID1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReviewId");

                    b.HasIndex("ServiceID");

                    b.HasIndex("UserId");

                    b.ToTable("tblReviews");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Roles", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RolesTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("tblRoles");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.RoleType", b =>
                {
                    b.Property<int>("RoleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleTypeId");

                    b.ToTable("tblRoleTypes");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessDetailsFormBsnServiceDetailsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategorgoiesCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ServiceTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServicesType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubCategoriesSubCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimesofAvail")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Verified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VerifiedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceID");

                    b.HasIndex("AddressID");

                    b.HasIndex("BusinessDetailsFormBsnServiceDetailsID");

                    b.HasIndex("CategorgoiesCategoryId");

                    b.HasIndex("SubCategoriesSubCategoryId");

                    b.HasIndex("UserID");

                    b.ToTable("tblServices");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.ShareYourViews", b =>
                {
                    b.Property<int>("ShareYourViewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ViewsTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ShareYourViewsId");

                    b.HasIndex("UserId");

                    b.ToTable("tblShareYourViews");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StateTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("StateId");

                    b.ToTable("tblStates");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.SubCategories", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubCategoryTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("tblSubCategories");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("MobileNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UserTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("AddressID");

                    b.ToTable("tblUsers");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.WishList", b =>
                {
                    b.Property<int>("WishListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UserWishListTimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("WishListId");

                    b.HasIndex("ServiceID");

                    b.HasIndex("UserId");

                    b.ToTable("tblWishLists");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.ActivityLog", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Address", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.AppConfig", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.BusinessDetailsForm", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.PreListingDetail", "preListingDetails")
                        .WithMany()
                        .HasForeignKey("PreListingDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");

                    b.Navigation("preListingDetails");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.ErrorLog", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.ErrorType", "ErrorType")
                        .WithMany()
                        .HasForeignKey("ErrorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ErrorType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.FAQ", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.BusinessDetailsForm", "BusinessDetailsForm")
                        .WithMany()
                        .HasForeignKey("BsnServiceDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessDetailsForm");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Image", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.BusinessDetailsForm", "BusinessDetailsForm")
                        .WithMany()
                        .HasForeignKey("BusinessDetailsFormBsnServiceDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessDetailsForm");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Membership", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.MembershipType", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MembershipType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Orders", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.PreListingDetail", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Query", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Review", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID");

                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Roles", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.RoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.Service", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.BusinessDetailsForm", "BusinessDetailsForm")
                        .WithMany()
                        .HasForeignKey("BusinessDetailsFormBsnServiceDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.Categories", "Categorgoies")
                        .WithMany()
                        .HasForeignKey("CategorgoiesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.SubCategories", "SubCategories")
                        .WithMany()
                        .HasForeignKey("SubCategoriesSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("BusinessDetailsForm");

                    b.Navigation("Categorgoies");

                    b.Navigation("SubCategories");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.ShareYourViews", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.SubCategories", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.User", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BusinessDirectory.DB.Models.WishList", b =>
                {
                    b.HasOne("BusinessDirectory.DB.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessDirectory.DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
