@page "/register"
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h4" Color="Color.Tertiary">Register  for seamless experience</MudText>

<EditForm Model="userRegister" OnValidSubmit="HandleGetOTP" hidden="@(!hideForm)">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <MudTextField id="email" Label="Email" @bind-Value="userRegister.Email" For="@(() => userRegister.Email)" class="form-control"></MudTextField>
    </div>
    <div class="form-group">
        <MudTextField id="firstname" Label="First Name" For="@(() => userRegister.FirstName)" @bind-Value="userRegister.FirstName" class="form-control"></MudTextField>
    </div>
    <div class="form-group">
        <MudTextField id="lastname" Label="Last Name" @bind-Value="userRegister.LastName"  For="@(() => userRegister.LastName)" class="form-control"></MudTextField>
    </div>
    <MudCardActions>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" Class="ml-auto">Get OTP</MudButton>
    </MudCardActions>
</EditForm>

<EditForm Model="userOTP" OnValidSubmit="HandleRegistration" hidden="@hideForm">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <MudTextField id="otp" @bind-Value="userOTP.OTP" Label="OTP"  For="@(() => userOTP.OTP)"  class="form-control"></MudTextField>
    </div>
    <MudCardActions>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" Class="ml-auto">Register</MudButton>
    </MudCardActions>
</EditForm>

@code {
    UserRegister userRegister = new UserRegister();
    UserOTP userOTP = new UserOTP();
    private bool hideForm = true;
    async void HandleRegistration()
    {
        var result = await AuthService.Register(userRegister, userOTP);
        if (result.Success)
        {
            NavigationManager.NavigateTo("login");
        }
        else
        {
            Console.WriteLine(result.Message);
        }
    }

    async void HandleGetOTP()
    {
        hideForm = !hideForm;
        var result = await AuthService.GetOTP(new UserLogin
            {
                Email = userRegister.Email,
                OTPValidate = new OTPValidate()
                {
                    UserOTP = string.Empty,
                    EncryptedActualOTPTimestamp = string.Empty
                }
            });
        if (result.Success)
        {
            Console.WriteLine(result.Message);
            await LocalStorage.SetItemAsync<string>("OTP", result.Data);
        }
        else
        {
            Console.WriteLine(result.Message);
        }
    }
}
